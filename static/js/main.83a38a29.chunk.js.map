{"version":3,"sources":["components/NavigationBar/NavigationBar.tsx","App.tsx","Pages/HomePage.tsx","utils/constants.ts","api.ts","utils/getPreparedPeople.ts","components/Loader/Loader.tsx","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","types/Sex.ts","components/PeopleFilters/PeopleFilters.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTableItem/PeopleTableItem.tsx","components/PeopleTable/PeopleTable.tsx","utils/applySearchAndFilter.ts","utils/filterPeopleBy.ts","utils/sortPeopleBy.ts","Pages/PeoplePage.tsx","Pages/UnknownPage.tsx","Root.tsx","index.tsx"],"names":["NavigationBar","getClassNames","isActive","classNames","className","role","to","App","HomePage","PEOPLE_DOWNLOAD_ERROR","TABLE_ATTRIBUTES","DEFAULT_PARAMS","sex","centuries","query","CENTURIES_TO_FILTER","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","fetch","response","ok","Error","json","getPreparedPeople","people","map","person","mother","find","name","motherName","father","fatherName","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","Sex","PeopleFilters","setSearchPrams","sexFromSearch","get","centuriesFromSearch","getAll","queryFromSearch","type","placeholder","onChange","event","target","century","stringCentury","includes","centuriesToReceive","filter","centuryFromSearch","length","PersonLink","slug","Female","PeopleTableItem","selectedPersonSlug","born","died","PeopleTable","useParams","sort","order","handleAddSort","attribute","normalizedAttribute","toLowerCase","isSortActive","applySearchAndFilter","stringParams","currentPeople","searchSex","searchCenturies","searchQuery","trim","birthCentury","String","Math","ceil","filterPeople","sortField","a","b","aValue","bValue","localeCompare","sortPeople","PeoplePage","useState","setPeople","isPeopleLoading","setIsPeopleLoading","hasError","setHasError","visiblePeople","isSuccessfullyLoaded","useEffect","fetchPeople","peopleFromServer","preparedPeople","Boolean","UnknownPage","navigate","useNavigate","timerId","clearTimeout","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.83a38a29.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Link } from '../../types/Link';\n\nexport const NavigationBar: React.FC = () => {\n  const getClassNames = ({ isActive }: Link) => {\n    return classNames(\n      'navbar-item',\n      {\n        'has-background-grey-lighter': isActive,\n      },\n    );\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getClassNames}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getClassNames}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { NavigationBar } from './components/NavigationBar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavigationBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const REDIRECT_DELAY = 3000;\nexport const PEOPLE_DOWNLOAD_ERROR = 'Something went wrong';\nexport const PARENT_NOT_SET_VALUE = '-';\nexport const TABLE_ATTRIBUTES = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n\nexport const DEFAULT_PARAMS = {\n  sex: null,\n  centuries: null,\n  query: null,\n};\n\nexport const CENTURIES_TO_FILTER = [16, 17, 18, 19, 20];\n","import { Person } from './types';\nimport { PEOPLE_DOWNLOAD_ERROR } from './utils/constants';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  await wait(500);\n\n  try {\n    const response = await fetch(API_URL);\n\n    if (!response.ok) {\n      throw new Error(PEOPLE_DOWNLOAD_ERROR);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(PEOPLE_DOWNLOAD_ERROR);\n  }\n}\n","import { Person } from '../types';\n\nexport const getPreparedPeople = (people: Person[]): Person[] => {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(mother => mother.name === person.motherName),\n      father: people.find(father => father.name === person.fatherName),\n    };\n  });\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { SearchParams } from '../types';\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { SearchParams } from '../../types/SearchParams';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum Sex {\n  Male = 'm',\n  Female = 'f',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from '../SearchLink';\nimport { Sex } from '../../types';\nimport { CENTURIES_TO_FILTER, DEFAULT_PARAMS } from '../../utils/constants';\nimport { getSearchWith } from '../../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchPrams] = useSearchParams();\n  const sexFromSearch = searchParams.get('sex') || '';\n  const centuriesFromSearch = searchParams.getAll('centuries') || [];\n  const queryFromSearch = searchParams.get('query') || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const query = event.target.value || null;\n\n    setSearchPrams(\n      getSearchWith(searchParams, { query }),\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sexFromSearch })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        {Object.entries(Sex).map(sex => (\n          <SearchLink\n            className={classNames({ 'is-active': sexFromSearch === sex[1] })}\n            params={{ sex: sex[1] }}\n          >\n            {sex[0]}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={queryFromSearch}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_TO_FILTER.map(century => {\n              const stringCentury = century.toString();\n              const isActive = centuriesFromSearch.includes(\n                century.toString(),\n              );\n\n              const centuriesToReceive = isActive\n                ? (centuriesFromSearch.filter(centuryFromSearch => (\n                  centuryFromSearch !== stringCentury\n                ))\n                ) : (\n                  [...centuriesFromSearch, stringCentury]\n                );\n\n              return (\n                <SearchLink\n                  data-cy=\"century\"\n                  className={classNames(\n                    'button',\n                    'mr-1',\n                    {\n                      'is-info': isActive,\n                    },\n                  )}\n                  params={{ centuries: centuriesToReceive }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                {\n                  'is-outlined': centuriesFromSearch.length,\n                },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={DEFAULT_PARAMS}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { Sex } from '../../types/Sex';\n\ninterface Props {\n  person: Person;\n}\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={`../${person.slug}?${searchParams.toString()}`}\n      className={classNames(\n        { 'has-text-danger': person.sex === Sex.Female },\n      )}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { PARENT_NOT_SET_VALUE } from '../../utils/constants';\n\ninterface Props {\n  person: Person;\n  selectedPersonSlug: string;\n}\nexport const PeopleTableItem: React.FC<Props> = ({\n  person,\n  selectedPersonSlug,\n}) => {\n  const {\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    slug,\n    mother,\n    father,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={\n        classNames({ 'has-background-warning': slug === selectedPersonSlug })\n      }\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || PARENT_NOT_SET_VALUE\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || PARENT_NOT_SET_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person, SearchParams } from '../../types';\nimport { PeopleTableItem } from '../PeopleTableItem';\nimport { TABLE_ATTRIBUTES } from '../../utils/constants';\nimport { SearchLink } from '../SearchLink';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { selectedPersonSlug = '' } = useParams();\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const handleAddSort = (attribute: string): SearchParams => {\n    switch (sort === attribute) {\n      case true: {\n        if (order) {\n          return { order: null, sort: null };\n        }\n\n        return { order: 'desc' };\n      }\n\n      case false:\n      default: {\n        return { order: null, sort: attribute };\n      }\n    }\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {TABLE_ATTRIBUTES.map(attribute => {\n            if (attribute !== 'Mother' && attribute !== 'Father') {\n              const normalizedAttribute = attribute.toLowerCase();\n              const isSortActive = sort === normalizedAttribute;\n\n              return (\n                <th key={attribute}>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    {attribute}\n                    <SearchLink params={handleAddSort(normalizedAttribute)}>\n                      <span className=\"icon\">\n                        <i className={classNames(\n                          'fas',\n                          {\n                            'fa-sort': !isSortActive,\n                            'fa-sort-up': isSortActive && !order,\n                            'fa-sort-down': isSortActive && order,\n                          },\n                        )}\n                        />\n                      </span>\n                    </SearchLink>\n                  </span>\n                </th>\n              );\n            }\n\n            return <th key={attribute}>{attribute}</th>;\n          })}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PeopleTableItem\n            person={person}\n            key={person.slug}\n            selectedPersonSlug={selectedPersonSlug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from '../types';\nimport { filterPeople } from './filterPeopleBy';\nimport { sortPeople } from './sortPeopleBy';\n\nexport const applySearchAndFilter = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const stringParams = searchParams.toString();\n\n  if (!stringParams) {\n    return people;\n  }\n\n  let currentPeople = people;\n\n  if (stringParams.includes('centuries')\n    || stringParams.includes('sex=')\n    || stringParams.includes('query')\n  ) {\n    currentPeople = filterPeople(people, searchParams);\n  }\n\n  if (stringParams.includes('sort') && currentPeople.length) {\n    currentPeople = sortPeople(currentPeople, searchParams);\n  }\n\n  return currentPeople;\n};\n","import { Person } from '../types';\n\nexport const filterPeople = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const searchSex = searchParams.get('sex');\n  const searchCenturies = searchParams.getAll('centuries');\n  const searchQuery = searchParams.get('query')?.toLowerCase().trim();\n\n  return people.filter(({\n    sex, born, motherName, fatherName, name,\n  }) => {\n    const birthCentury = String(Math.ceil(born / 100));\n\n    if (searchSex && sex !== searchSex) {\n      return false;\n    }\n\n    if (searchCenturies.length && !searchCenturies.includes(birthCentury)) {\n      return false;\n    }\n\n    if (searchQuery\n      && !(name.toLowerCase().includes(searchQuery)\n        || motherName?.toLowerCase().includes(searchQuery)\n        || fatherName?.toLowerCase().includes(searchQuery))\n    ) {\n      return false;\n    }\n\n    return true;\n  });\n};\n","import { Person } from '../types';\n\nexport const sortPeople = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const sortField = searchParams.get('sort');\n  const order = searchParams.get('order') ? -1 : 1;\n\n  if (!sortField || !people.length || !(sortField in people[0])) {\n    return people;\n  }\n\n  return [...people].sort((a: Person, b: Person) => {\n    const aValue = a[sortField as keyof Person];\n    const bValue = b[sortField as keyof Person];\n\n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return aValue.localeCompare(bValue) * order;\n    }\n\n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return (aValue - bValue) * order;\n    }\n\n    return 0;\n  });\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\nimport { Loader } from '../components/Loader';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { applySearchAndFilter } from '../utils/applySearchAndFilter';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isPeopleLoading, setIsPeopleLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [searchParams] = useSearchParams();\n  const visiblePeople = applySearchAndFilter(people, searchParams);\n\n  const isSuccessfullyLoaded = !hasError && !isPeopleLoading;\n\n  useEffect(() => {\n    setIsPeopleLoading(true);\n\n    const fetchPeople = async () => {\n      try {\n        const peopleFromServer = await getPeople();\n        const preparedPeople = getPreparedPeople(peopleFromServer);\n\n        setPeople(preparedPeople);\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsPeopleLoading(false);\n      }\n    };\n\n    fetchPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isPeopleLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isPeopleLoading && (\n                <Loader />\n              )}\n\n              {hasError && (\n                <p data-cy=\"peopleLoadingError\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isSuccessfullyLoaded && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isSuccessfullyLoaded && !visiblePeople.length && (\n                <p>\n                  There are no people matching the current search criteria\n                </p>\n              )}\n\n              {isSuccessfullyLoaded && Boolean(visiblePeople.length) && (\n                <PeopleTable people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { REDIRECT_DELAY } from '../utils/constants';\n\nexport const UnknownPage: React.FC = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      navigate('/');\n    }, REDIRECT_DELAY);\n\n    return () => (\n      clearTimeout(timerId)\n    );\n  }, []);\n\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter as Router, Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './Pages/HomePage';\nimport { PeoplePage } from './Pages/PeoplePage';\nimport { UnknownPage } from './Pages/UnknownPage';\n\nexport const Root: React.FC = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"people\">\n            <Route path=\":selectedPersonSlug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<UnknownPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}