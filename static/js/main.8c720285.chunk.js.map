{"version":3,"sources":["utils/getNavLinkClassNames.ts","components/NavigationBar/NavigationBar.tsx","App.tsx","Pages/HomePage.tsx","utils/constants.ts","api.ts","utils/findPersonByName.ts","utils/getPreparedPeople.ts","components/Loader/Loader.tsx","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","types/Sex.ts","components/PeopleFilters/PeopleFilters.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTableItem/PeopleTableItem.tsx","components/PeopleTableBody/PeopleTableBody.tsx","components/PeopleTableHeadings/PeopleTableHeadings.tsx","components/PeopleTable/PeopleTable.tsx","utils/applySearchAndFilter.ts","utils/getFilteredPeople.ts","utils/sortPeopleBy.ts","Pages/PeoplePage.tsx","Pages/UnknownPage.tsx","Root.tsx","index.tsx"],"names":["getNavLinkClassNames","isActive","classNames","NavigationBar","useSearchParams","searchParams","className","role","to","pathname","search","toString","App","HomePage","PEOPLE_DOWNLOAD_ERROR","TABLE_ATTRIBUTES","DEFAULT_PARAMS","sex","centuries","query","SORTING_EXCEPTIONS","CENTURIES_TO_FILTER","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","fetch","response","ok","Error","json","findPersonByName","people","personName","find","name","getPreparedPeople","map","person","mother","motherName","father","fatherName","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","Sex","PeopleFilters","setSearchPrams","sexFromSearch","get","centuriesFromSearch","getAll","queryFromSearch","type","placeholder","onChange","event","target","century","stringCentury","includes","centuriesToReceive","filter","centuryFromSearch","length","PersonLink","slug","Female","PeopleTableItem","selectedPersonSlug","born","died","PeopleTableBody","useParams","PeopleTableHeadings","sort","order","handleAddSort","attribute","isCurrentSort","normalizedAttribute","toLowerCase","isSortActive","PeopleTable","applySearchAndFilter","stringParams","currentPeople","searchSex","searchCenturies","searchQuery","trim","birthCentury","String","Math","ceil","getFilteredPeople","sortField","a","b","item1","item2","localeCompare","sortPeople","PeoplePage","useState","setPeople","isPeopleLoading","setIsPeopleLoading","hasError","setHasError","visiblePeople","isSuccessfullyLoaded","isSuccessfullyLoadedEmpty","isSuccessfullyLoadedNoMatch","isSuccessfullyLoadedHasMatch","Boolean","useLayoutEffect","fetchPeople","peopleFromServer","preparedPeople","UnknownPage","navigate","useNavigate","useEffect","timerId","clearTimeout","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8c720285.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Link } from '../types';\n\nexport const getNavLinkClassNames = ({ isActive }: Link) => {\n  return classNames(\n    'navbar-item',\n    {\n      'has-background-grey-lighter': isActive,\n    },\n  );\n};\n","import { NavLink, useSearchParams } from 'react-router-dom';\nimport { getNavLinkClassNames } from '../../utils/getNavLinkClassNames';\n\nexport const NavigationBar: React.FC = () => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getNavLinkClassNames}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getNavLinkClassNames}\n            to={\n              {\n                pathname: '/people',\n                search: `?${searchParams.toString()}`,\n              }\n            }\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { NavigationBar } from './components/NavigationBar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavigationBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const REDIRECT_DELAY = 3000;\nexport const PEOPLE_DOWNLOAD_ERROR = 'Something went wrong';\nexport const NOT_SET_VALUE = '-';\nexport const TABLE_ATTRIBUTES = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n\nexport const DEFAULT_PARAMS = {\n  sex: null,\n  centuries: null,\n  query: null,\n};\n\nexport const SORTING_EXCEPTIONS = ['Father', 'Mother'];\n\nexport const CENTURIES_TO_FILTER = [16, 17, 18, 19, 20];\n\nexport const YEARS_PER_CENTURY = 100;\n","import { Person } from './types';\nimport { PEOPLE_DOWNLOAD_ERROR } from './utils/constants';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  await wait(500);\n\n  try {\n    const response = await fetch(API_URL);\n\n    if (!response.ok) {\n      throw new Error(PEOPLE_DOWNLOAD_ERROR);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(PEOPLE_DOWNLOAD_ERROR);\n  }\n}\n","import { Person } from '../types';\n\nexport const findPersonByName = (\n  people: Person[],\n  personName: string | null,\n): Person | null => {\n  if (!personName) {\n    return null;\n  }\n\n  return people.find(({ name }) => name === personName) || null;\n};\n","import { Person } from '../types';\nimport { findPersonByName } from './findPersonByName';\n\nexport const getPreparedPeople = (people: Person[]): Person[] => {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: findPersonByName(people, person.motherName),\n      father: findPersonByName(people, person.fatherName),\n    };\n  });\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { SearchParams } from '../types';\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { SearchParams } from '../../types/SearchParams';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum Sex {\n  Male = 'm',\n  Female = 'f',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from '../SearchLink';\nimport { Sex } from '../../types';\nimport { CENTURIES_TO_FILTER, DEFAULT_PARAMS } from '../../utils/constants';\nimport { getSearchWith } from '../../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchPrams] = useSearchParams();\n  const sexFromSearch = searchParams.get('sex') || '';\n  const centuriesFromSearch = searchParams.getAll('centuries') || [];\n  const queryFromSearch = searchParams.get('query') || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const query = event.target.value || null;\n\n    setSearchPrams(\n      getSearchWith(searchParams, { query }),\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sexFromSearch })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        {Object.entries(Sex).map(([key, value]) => (\n          <SearchLink\n            className={classNames({ 'is-active': sexFromSearch === value })}\n            params={{ sex: value }}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={queryFromSearch}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_TO_FILTER.map(century => {\n              const stringCentury = century.toString();\n              const isActive = centuriesFromSearch.includes(\n                century.toString(),\n              );\n\n              const centuriesToReceive = isActive\n                ? (centuriesFromSearch.filter(centuryFromSearch => (\n                  centuryFromSearch !== stringCentury\n                ))\n                ) : (\n                  [...centuriesFromSearch, stringCentury]\n                );\n\n              return (\n                <SearchLink\n                  data-cy=\"century\"\n                  className={classNames(\n                    'button',\n                    'mr-1',\n                    {\n                      'is-info': isActive,\n                    },\n                  )}\n                  params={{ centuries: centuriesToReceive }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                {\n                  'is-outlined': centuriesFromSearch.length,\n                },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={DEFAULT_PARAMS}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { Sex } from '../../types/Sex';\n\ninterface Props {\n  person: Person;\n}\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={`../${person.slug}?${searchParams.toString()}`}\n      className={classNames(\n        { 'has-text-danger': person.sex === Sex.Female },\n      )}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { NOT_SET_VALUE } from '../../utils/constants';\n\ninterface Props {\n  person: Person;\n  selectedPersonSlug: string;\n}\nexport const PeopleTableItem: React.FC<Props> = ({\n  person,\n  selectedPersonSlug,\n}) => {\n  const {\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    slug,\n    mother,\n    father,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={\n        classNames({ 'has-background-warning': slug === selectedPersonSlug })\n      }\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || NOT_SET_VALUE\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NOT_SET_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { PeopleTableItem } from '../PeopleTableItem';\nimport { Person } from '../../types';\n\ninterface Props {\n  people: Person[]\n}\n\nexport const PeopleTableBody: React.FC<Props> = ({ people }) => {\n  const { selectedPersonSlug = '' } = useParams();\n\n  return (\n    <tbody>\n      {people.map(person => (\n        <PeopleTableItem\n          person={person}\n          key={person.slug}\n          selectedPersonSlug={selectedPersonSlug}\n        />\n      ))}\n    </tbody>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SORTING_EXCEPTIONS, TABLE_ATTRIBUTES } from '../../utils/constants';\nimport { SearchLink } from '../SearchLink';\nimport { SearchParams } from '../../types';\n\nexport const PeopleTableHeadings: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const handleAddSort = (attribute: string): SearchParams => {\n    const isCurrentSort = sort === attribute;\n\n    if (isCurrentSort && order) {\n      return { order: null, sort: null };\n    }\n\n    if (isCurrentSort) {\n      return { order: 'desc' };\n    }\n\n    return { order: null, sort: attribute };\n  };\n\n  return (\n    <thead>\n      <tr>\n        {TABLE_ATTRIBUTES.map(attribute => {\n          if (SORTING_EXCEPTIONS.includes(attribute)) {\n            return <th key={attribute}>{attribute}</th>;\n          }\n\n          const normalizedAttribute = attribute.toLowerCase();\n          const isSortActive = sort === normalizedAttribute;\n\n          return (\n            <th key={attribute}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {attribute}\n                <SearchLink params={handleAddSort(normalizedAttribute)}>\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'fas',\n                      {\n                        'fa-sort': !isSortActive,\n                        'fa-sort-up': isSortActive && !order,\n                        'fa-sort-down': isSortActive && order,\n                      },\n                    )}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          );\n        })}\n      </tr>\n    </thead>\n  );\n};\n","import { Person } from '../../types';\nimport { PeopleTableBody } from '../PeopleTableBody/PeopleTableBody';\nimport { PeopleTableHeadings } from '../PeopleTableHeadings';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <PeopleTableHeadings />\n\n      <PeopleTableBody people={people} />\n    </table>\n  );\n};\n","import { Person } from '../types';\nimport { getFilteredPeople } from './getFilteredPeople';\nimport { sortPeople } from './sortPeopleBy';\n\nexport const applySearchAndFilter = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const stringParams = searchParams.toString();\n\n  if (!stringParams) {\n    return people;\n  }\n\n  let currentPeople = people;\n\n  if (stringParams.includes('centuries')\n    || stringParams.includes('sex=')\n    || stringParams.includes('query')\n  ) {\n    currentPeople = getFilteredPeople(people, searchParams);\n  }\n\n  if (stringParams.includes('sort') && currentPeople.length) {\n    currentPeople = sortPeople(currentPeople, searchParams);\n  }\n\n  return currentPeople;\n};\n","import { Person } from '../types';\nimport { YEARS_PER_CENTURY } from './constants';\n\nexport const getFilteredPeople = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const searchSex = searchParams.get('sex');\n  const searchCenturies = searchParams.getAll('centuries');\n  const searchQuery = searchParams.get('query')?.toLowerCase().trim();\n\n  return people.filter(({\n    sex, born, motherName, fatherName, name,\n  }) => {\n    const birthCentury = String(Math.ceil(born / YEARS_PER_CENTURY));\n\n    if (searchSex && sex !== searchSex) {\n      return false;\n    }\n\n    if (searchCenturies.length && !searchCenturies.includes(birthCentury)) {\n      return false;\n    }\n\n    if (searchQuery\n      && !(name.toLowerCase().includes(searchQuery)\n        || motherName?.toLowerCase().includes(searchQuery)\n        || fatherName?.toLowerCase().includes(searchQuery))\n    ) {\n      return false;\n    }\n\n    return true;\n  });\n};\n","import { Person } from '../types';\n\nexport const sortPeople = (\n  people: Person[],\n  searchParams: URLSearchParams,\n): Person[] => {\n  const sortField = searchParams.get('sort');\n  const order = searchParams.get('order') ? -1 : 1;\n\n  if (!sortField || !people.length || !(sortField in people[0])) {\n    return people;\n  }\n\n  return [...people].sort((a: Person, b: Person) => {\n    const item1 = a[sortField as keyof Person];\n    const item2 = b[sortField as keyof Person];\n\n    if (typeof item1 === 'string' && typeof item2 === 'string') {\n      return item1.localeCompare(item2) * order;\n    }\n\n    if (typeof item1 === 'number' && typeof item2 === 'number') {\n      return (item1 - item2) * order;\n    }\n\n    return 0;\n  });\n};\n","import { useLayoutEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\nimport { Loader } from '../components/Loader';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { applySearchAndFilter } from '../utils/applySearchAndFilter';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isPeopleLoading, setIsPeopleLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [searchParams] = useSearchParams();\n  const visiblePeople = applySearchAndFilter(people, searchParams);\n\n  const isSuccessfullyLoaded = !hasError && !isPeopleLoading;\n  const isSuccessfullyLoadedEmpty = isSuccessfullyLoaded && !people.length;\n  const isSuccessfullyLoadedNoMatch = isSuccessfullyLoaded\n    && !visiblePeople.length;\n  const isSuccessfullyLoadedHasMatch = isSuccessfullyLoaded\n    && Boolean(visiblePeople.length);\n\n  useLayoutEffect(() => {\n    setIsPeopleLoading(true);\n\n    const fetchPeople = async () => {\n      try {\n        const peopleFromServer = await getPeople();\n        const preparedPeople = getPreparedPeople(peopleFromServer);\n\n        setPeople(preparedPeople);\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsPeopleLoading(false);\n      }\n    };\n\n    fetchPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isPeopleLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isPeopleLoading && (\n                <Loader />\n              )}\n\n              {hasError && (\n                <p data-cy=\"peopleLoadingError\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isSuccessfullyLoadedEmpty && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isSuccessfullyLoadedNoMatch && (\n                <p>\n                  There are no people matching the current search criteria\n                </p>\n              )}\n\n              {isSuccessfullyLoadedHasMatch && (\n                <PeopleTable people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { REDIRECT_DELAY } from '../utils/constants';\n\nexport const UnknownPage: React.FC = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      navigate('/');\n    }, REDIRECT_DELAY);\n\n    return () => (\n      clearTimeout(timerId)\n    );\n  }, []);\n\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter as Router, Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './Pages/HomePage';\nimport { PeoplePage } from './Pages/PeoplePage';\nimport { UnknownPage } from './Pages/UnknownPage';\n\nexport const Root: React.FC = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"people\">\n            <Route path=\":selectedPersonSlug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<UnknownPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}